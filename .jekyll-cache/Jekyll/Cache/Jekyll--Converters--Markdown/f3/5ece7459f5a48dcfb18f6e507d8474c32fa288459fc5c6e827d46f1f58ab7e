I"|G<h2 id="1基本的细节知识">1.基本的细节知识</h2>

<ol>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span> <span class="n">f1</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span> <span class="c1">//这里3.14f加f的原因是由于c++中的小数默认是double,由于这里使用的是float接受，因此不加f内部会进行强制转换，加了f不用转换</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//c++中sizeof函数里面可以放关键字int，也可以用变量名a，功能是计算其字节的大小，一般在c++中对整型而言，占用字节如下</span>
<span class="c1">//short: 2byte,int: 4byte,long: 8byte(linux 64位) 4byte(windows和linux(32位)) long long:8byte</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//科学计数法</span>
<span class="kt">float</span> <span class="n">num</span> <span class="o">=</span> <span class="mf">3e2</span><span class="p">;</span> <span class="c1">//表示3*10^2</span>
<span class="kt">float</span> <span class="n">num</span> <span class="o">=</span> <span class="mf">3e-2</span><span class="p">;</span> <span class="c1">//表示3*10^-2</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//字符型与类型转换</span>
<span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="sc">'a'</span><span class="p">;</span> <span class="c1">//true</span>
<span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="s">"a"</span><span class="p">;</span> <span class="c1">//error 不可以为双引号</span>
<span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="err">'</span><span class="n">abc</span><span class="err">'</span><span class="p">;</span> <span class="c1">// error 只允许一个字符，不能多个</span>
<span class="c1">//值得注意的是字符在计算机中存储是用ASCII编码进行的，例如a=97,b=98;</span>
<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ch</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span> <span class="c1">//result: a</span>
<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">ch</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span> <span class="c1">//result: 97，注意这里使用了类型转换，转换的方式为:(类型)变量名。</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//转义字符 \t:表示八个空格，一般用于输出对齐的效果</span>
<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">aaa</span><span class="err">\</span><span class="n">thello</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span> <span class="c1">//这里aaa后面加五个空格就等于八个位置，因此与hello之间有五个空格，如何是aaaa，那么就剩下四个空格。</span>
<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">aaaaaaaaab</span><span class="err">\</span><span class="n">thello</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span> <span class="c1">//这里的hello之前有八个a和一个b，占了九个位置，那么此时\t就表示16个空格。两个\t也表示16个空格，以次类推。</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//c++中的数组，有两个特点</span>
<span class="c1">//1.数组中每个元素的数据类型一致</span>
<span class="c1">//2.存在在一个连续的内存中，这也为后面的指针索引做了铺垫。</span>
<span class="c1">//3.关于数组的初始化，例如</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//得出的结果将是不确定的数字，但不会报错，这将是很危险的操作</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//得到的结果全是0，一般用于初始化为0时候使用</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">};</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//结果为1 0 0,此时c++会把后面不够赋初值的数组全部默认为0</span>
<span class="c1">//总之就是记得初始化，否则将会得到难以预料的结果。</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//c++中一维数组名的用处</span>
<span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="c1">//1.可以统计整个数组在内存中的长度</span>
<span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">);</span>
<span class="c1">//2.可以获取数组在内存中的首地址</span>
<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">arr</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span><span class="c1">//此时arr,&amp;arr与&amp;arr[0]三者的结果是一样的</span>
<span class="c1">//同时应当注意数组名是一个常量不能够重新赋值</span>
   
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//c++中二维数组的属性和上面的一维数组一致，不过维度增加了，有部分的差异，详细可以自行体会。</span>
<span class="c1">//二维数组中数据在内存中的存贮顺序是按照行的顺序来的。</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//函数的值传递，形参发生交换并不影响实参</span>
<span class="c1">//函数的声明可以多次，但是定义只能一次</span>
</code></pre></div>    </div>
  </li>
  <li>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//指针存储的是一个地址，32位系统占用4个字节，64位系统占用8个字节</span>
<span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span> <span class="c1">//表示空指针，当一开始不确定指针指向的位置时候使用，本质上是将指针指向了内存为内存编号0的空间，计算机中0-255编号的内存为系统占用，不允许访问，因此访问空指针程序会报错。</span>
<span class="c1">//指针与普通的变量有着类似的表现，只不过指针存储的是一个地址，因此指针可以进行加减，但是请注意一般是与数组结合用于p++,p--情况。</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>代码的存储分为了代码区，全局区，栈区，堆区，其中在可执行文件中(linux:out windows:exe)，代码只分配在全局区和代码区，执行可执行文件时候，栈区的代码由操作系统控制释放，堆区由程序员管理，注意栈区中的变量基本是临时变量，因此在函数返回地址时候要注意不要返回栈区的地址，否则会出现意料之外的bug。详情看bilibili黑马程序员处讲解。</p>
  </li>
  <li>
    <p>应当记住的是，c++中引用，指针，const等在函数返回类型，函数参数传递类型等地方需要进行考虑，比如该函数的参数是否要使用const，应该是能使用 const就应当使用，还有就是返回类型是否需要引用等，返回地址，引用不能是临时变量(局部变量)等。<strong>返回引用的函数还可以作为左值，例如test()=20;其中test函数是返回引用的函数</strong>。这里可以理解为test()函数就相当于返回数据的那个变量，不同的名字而已，同时返回引用也可用不是引用的形式接收，例如可以int&amp; a = test()，也可以int a = test()。</p>
  </li>
  <li>
    <p>如果函数声明有默认参数，函数实现就不能有默认参数，否则产生二义性，编译器报错。声明和实现只能有一个有默认参数。</p>
  </li>
  <li>
    <p>函数占位参数形如：function(int a,int)，后面的int就表示占位参数，调用函数时候需要给定才可以。除此之外占位参数还可以有默认参数，形如function(int a,int=10)。</p>
  </li>
  <li>
    <p>函数重载的注意事项：引用和常量引用可以作为重载条件，形如func(int &amp;a)与func(const int &amp;a)可以重载，此时变量调用无const的函数，const修饰的变量和常数，如10，20，即func(10)会走有const的函数。此外默认参数有时候也会出现二义性，形如:func(int a,int b=10)和func(int a)，调用时候使用func(10)，这时候就出现了两个函数均可调用的情况，编译器报错，所以这时候应该尽量避免使用默认参数。</p>
  </li>
  <li>
    <p>构造函数的调用方式：</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//括号法</span>
<span class="n">Person</span> <span class="n">p1</span><span class="err">；</span> <span class="c1">//默认构造调用</span>
<span class="n">Person</span> <span class="nf">p2</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="err">；</span> <span class="c1">//有参构造调用</span>
<span class="n">Person</span> <span class="n">p3</span><span class="p">(</span><span class="n">p2</span><span class="p">);</span> <span class="c1">//拷贝函数调用</span>
<span class="c1">//显示法</span>
<span class="n">Person</span> <span class="n">p1</span><span class="err">；</span> <span class="c1">//默认构造调用</span>
<span class="n">Person</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="err">；</span> <span class="c1">//有参构造调用</span>
<span class="n">Person</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="n">p2</span><span class="p">);</span> <span class="c1">//拷贝函数调用</span>
<span class="c1">//常用的是括号法</span>
        
</code></pre></div>    </div>
  </li>
  <li>请注意在成员属性中含有指针情况下，应该在堆区创建数据，同时需要在析构函数中自行释放，但是<strong>如果有拷贝问题则需要重新写拷贝构造函数，否则会造成浅拷贝</strong>，详细分析看bilibili视频。</li>
  <li>在初始化类的数据时候，一般会使用构造函数，但是能<strong>够使用初始化列表情况下应该使用初始化列表</strong>，见视频侯捷讲解，初始化列表使用见黑马视频。</li>
  <li>在一个类中构造函数和析构函数的先后顺序是先进后出（即栈的功能），即先用类初始化的对象先构造，后析构。但是当一个类中含有另一个类的对象时候的顺序如何呢，形如</li>
</ol>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">A</span><span class="p">{}</span>
<span class="k">class</span> <span class="nc">B</span>
<span class="p">{</span>
    <span class="n">A</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//结论：当其他类对象作为本类的成员，则先构造其他类的对象，再构造本类。析构顺序正好相反，这也恰好符合了栈的先进后出规则。</span>
</code></pre></div></div>

<ol>
  <li>静态成员函数：所有对象共享同一个函数，且只能访问静态成员变量，访问静态成员函数除了使用对象通过点来访问外，还可以通过类名与双冒号访问，和命名空间中的有点像，同时也和普通成员函数一样拥有访问权限设置，<strong>初始化需要在类外声明</strong>。详见黑马视频。</li>
  <li><strong>c++中的this指针：</strong>c++类中成员函数和成员变量是分开存储的，类的占用字节大小只和非静态的成员变量有关。一个空的类中声明的对象称为空对象，它占用一个字节，之所以占用一个字节是因为当有多个空对象时候好区分其在内存中的位置分配。不是空的类，则按照非静态成员变量的字节总数计算对象的字节数。为了区分那个对象调用自己（成员函数），this指针起到了作用，它指向被调用的成员函数所属的对象，一般this指针的用途包含解决名称冲突和返回调用对象本身，每一个非静态成员函数都隐藏了一个this指针，可以直接使用，静态成员函数没有this指针，this指针的本质是指针常量，即指针指向的内存无法修改。</li>
  <li><strong>空指针访问成员函数：</strong>详见黑马视频，大致意思如下：</li>
</ol>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Person</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
<span class="n">p</span><span class="o">-&gt;</span><span class="n">showclassName</span><span class="p">();</span>
<span class="n">p</span><span class="o">-&gt;</span><span class="n">showPersonAge</span><span class="p">();</span>
<span class="c1">//showclassNmae和showPersonAge是Person的成员函数</span>
<span class="c1">//结论：空指针可以访问一般的成员函数，前提是不要设计到this指针，即一般不能够访问成员属性，可以访问一般的打印输出。</span>
</code></pre></div></div>

<ol>
  <li>const修饰的成员函数叫做常函数，同理使用const修饰的对象叫做常对象，常对象只能调用常函数，请注意const修饰类中的成员函数位置和修饰普通函数的位置，一般而言const修饰成员函数控制的数据是调用该函数的对象数据，即控制this指针，成员属性想要修改可以加关键词mutable，控制this指针的const放在成员函数的括号后面，和普通函数一样，也可以在成员函数的返回值类型前加const，此时该const修饰的是成员函数的返回值不能够修改，一个修饰this指针，一个修饰成员函数的返回值。参数一样可以添加const属性。</li>
</ol>
:ET